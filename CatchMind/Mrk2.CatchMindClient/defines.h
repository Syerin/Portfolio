#pragma once

#include <Windows.h>
#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
#include <map>
using namespace std;

#define MAXPLAYER 8
#define BUFSIZE	10240

#define GAMESIZE_WIDTH 1000
#define GAMESIZE_HEIGHT 750

#define DRAWSIZE_WIDTH 600
#define DRAWSIZE_HEIGHT 400
#define DRAWOFFSET_X 210
#define DRAWOFFSET_Y 150

#define QUESTION_POS_X GAMESIZE_WIDTH/2 - 50
#define QUESTION_POS_Y DRAWOFFSET_Y-50

#define ROUND_POS_X /*우측정렬*/ DRAWOFFSET_X + DRAWSIZE_WIDTH 
#define ROUND_POS_Y/*bottom*/ DRAWOFFSET_Y

#define BRUSH_SIZE_LB 15
#define BRUSH_SIZE_RB 30

#define PLAYER_LEFT_NAMEBLOCK 50
#define PLAYER_RIGHT_NAMEBLOCK GAMESIZE_WIDTH-(180)
#define PLAYER_NAMEBLOCK_ORIGIN_Y 130
#define PLAYER_NAMEBLOCK_OFFSET_Y 120

#define PLAYER_LEFT_NAME_POS_X PLAYER_LEFT_NAMEBLOCK+35
#define PLAYER_LEFT_NAME_POS_Y PLAYER_NAMEBLOCK_ORIGIN_Y + 25

#define PLAYER_RIGHT_NAME_POS_X PLAYER_RIGHT_NAMEBLOCK+35
#define PLAYER_RIGHT_NAME_POS_Y PLAYER_NAMEBLOCK_ORIGIN_Y +25

#define PLAYER_NAME_WIDTH 10
#define PLAYER_NAME_HEIGHT 10

#define PLAYER_IMAGE_POS_X 80
#define PLAYER_IMAGE_POS_Y 10


#define PLAYER_LEFT_SCORE_POS_X PLAYER_LEFT_NAMEBLOCK+35
#define PLAYER_RIGHT_SCORE_POS_Y PLAYER_RIGHT_NAMEBLOCK+35
#define PLAYER_SCORE_WIDTH 10
#define PLAYER_SCORE_HEIGHT 45


#define ID_EDIT 100
#define ID_CHAT 101
#define EDIT_ORIGIN_Y (DRAWOFFSET_Y + DRAWSIZE_HEIGHT)+20
#define EDIT_ORIGIN_X (DRAWOFFSET_X+ DRAWSIZE_WIDTH)-300
#define EDIT_CHAT_WIDTH 300
#define EDIT_CHAT_HEIGHT 20


#define CHAT_WIDTH 100
#define CHAT_HEIGHT 30
#define CHAT_LINEMAX 12
#define OFFSET_CHAT 10
#define CHAT_SIZE_WIDTH 10
#define CHAT_SIZE_HEIGHT 20
#define CHAT_LINE_COUNT 3

#define QUESTION_OFFSET_X 8
#define QUESTION_OFFSET_Y 10

#define BUTTON_READY_POS_X GAMESIZE_WIDTH -300
#define BUTTON_READY_POS_Y GAMESIZE_HEIGHT -150
#define BUTTON_START_POS_X GAMESIZE_WIDTH -300
#define BUTTON_START_POS_Y GAMESIZE_HEIGHT -150

#define PAINT_POS_X DRAWOFFSET_X
#define PAINT_POS_Y (DRAWOFFSET_Y + DRAWSIZE_HEIGHT)+20
#define PAINT_WIDTH 30
#define PAINT_HEIGHT 30
#define PAINT_OFFSET 2

#define TIMER_POS_X DRAWOFFSET_X
#define TIMER_POS_Y PAINT_POS_Y + PAINT_HEIGHT + 20
#define TIMER_FONTSIZE 20


#define RANK_POS_X GAMESIZE_WIDTH/2-250
#define RANK_POS_Y DRAWOFFSET_Y - 30
#define RANK_OFFSET_X  120
#define RANK_OFFSET_Y 60

#define RANK_NAME_WIDTH 200
#define RANK_WIDTH 50
#define RANK_SCORE_WIDTH 50

#define RANK_HEIGHT FONTSIZE_LOGIN

#define FONTSIZE_LOGIN 40

#define BUTTON_CLEAN_POS_X 380
#define BUTTON_CLEAN_POS_Y 610

#define SAFE_DELETE(p) {if(p){delete(p); (p)=0;}}
#define SAFE_DETE_ARRAY(p) {if(p){delete[] (p); (p) = 0;}}

enum DIRECTION
{
	DIRECTION_LT,
	DIRECTION_T,
	DIRECTION_RT,
	DIRECTION_R,
	DIRECTION_RB,
	DIRECTION_B,
	DIRECTION_LB,
	DIRECTION_L,
	DIRECTION_END,
};
enum DRAWTYPE
{
	DRAWTYPE_CLICK_LB,
	DRAWTYPE_CLICK_RB,
	DRAWTYPE_MOVE_LB,
	DRAWTYPE_MOVE_RB,
	DRAWTYPE_PAINT_LB,
	DRAWTYPE_PAINT_RB,
	DRAWTYPE_PREV_STRATE_LB,
	DRAWTYPE_PREV_STRATE_RB,

	DRAWTYPE_END
};
enum GAME_STATE
{
	GAME_STATE_WAIT,
	GAME_STATE_START,
	GAME_STATE_GAME,
	GAME_STATE_ANSWER,
	GAME_STATE_NEXT,
	GAME_STATE_RESULTS,
	GAME_STATE_GAMEOVER,
};

enum PLAYER_STATE
{
	PLAYER_STATE_WAIT,//대기중
	PLAYER_STATE_READY,//준비
	PLAYER_STATE_START_ACT,
	PLAYER_STATE_START,
	PLAYER_STATE_GAME,
	PLAYER_STATE_DRAW,//그림
	PLAYER_STATE_ANSWER,//맞춤
	PLAYER_STATE_TRESPASS,//난입
	PLAYER_STATE_END
};
enum FONT_TYPE
{
	FONT_TYPE_LOGIN,
	FONT_TYPE_CHAT,
	FONT_TYPE_OPTION,
	FONT_TYPE_TIMER,
	FONT_TYPE_END,
};
enum CHARACTER_TYPE
{
	CHARACTER_TYPE_00,
	CHARACTER_TYPE_01,
	CHARACTER_TYPE_02,
	CHARACTER_TYPE_03,
	CHARACTER_TYPE_END
};

enum COLOR_TYPE
{
	COLOR_TYPE_BLACK,
	COLOR_TYPE_RED,
	COLOR_TYPE_ORANGE,
	COLOR_TYPE_YELLOW,
	COLOR_TYPE_BLUE,
	COLOR_TYPE_GREEN,
	COLOR_TYPE_BROWN,
	COLOR_TYPE_WHITE,

	COLOR_TYPE_END,
};
enum RES_TYPE
{
	RES_TYPE_BACKGROUND,
	RES_TYPE_NAMEBLOCK,
	RES_TYPE_NAMEBLOCK_HOST,
	RES_TYPE_NAMEBLOCK_FRAME_DRAW,
	RES_TYPE_NAMEBLOCK_FRAME_READY,

	RES_TYPE_LOGIN,
	RES_TYPE_LOGIN_ID,

	RES_TYPE_GAME_READY,
	RES_TYPE_GAME_START,

	RES_TYPE_BUTTON_READY_WAIT,
	RES_TYPE_BUTTON_READY,
	RES_TYPE_BUTTON_START,

	RES_TYPE_CHAT,

	RES_TYPE_BUTTON,
	RES_TYPE_SELECTCOLOR,
	RES_TYPE_QUESTION,

	RES_TYPE_STAR,

	RES_TYPE_NEXT_TURN,

	RES_TYPE_CLEAN,
	RES_TYPE_RANK_LINE,
	RES_TYPE_EXPLAIN,
	RES_TYPE_ALLREADY,
	RES_TYPE_TREPASS,
	RES_TYPE_END,
};
enum CLIENT_STATE
{
	CLIENT_STATE_IDCHECK,
	CLIENT_STATE_IDCHECKING,

	CLIENT_STATE_ROOM_IN,
	CLIENT_STATE_ROOM_EXIT,
};